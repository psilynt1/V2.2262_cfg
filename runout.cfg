
#####################################################################
#### Filament runout sensor config
#####################################################################

##  basic filament switch sensor
[filament_switch_sensor RBOWDEN_SENSOR]
pause_on_runout: FALSE
runout_gcode: F_CONSUMED
event_delay: 2.0
switch_pin: !PG15


##  filament runout/change logic
[gcode_macro M600]
gcode:
    # calculate safe anti-stringing temporary printhead move location 
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=M600_state  ; save gcode state before we touch anything
    PAUSE_BASE                     ; real pause
    G91                            ; relative positioning
    G1 E-1.0 F2700                 ; retract 1mm extruder
    G90                            ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move head to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F5000  ; park head at rear
    G91                            ; relative positioning
    G1 E-50.0 F1500                ; retract 50mm extruder
    FLASH_CHAMBER_LIGHTS           ; ready to change notification
    RESTORE_GCODE_STATE NAME=M600_state  ; restore original gcode state


##  delayed filament tracking 
[gcode_macro F_CONSUMED]
variable_toolhead_position: 0
variable_filament_consumed: 0
variable_filament_length:   500    ; mm of filament to consume after runout detection
gcode:
    # save current filament consumption
    SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
    # save current toolhead position
    SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=toolhead_position VALUE={printer.toolhead.position.z}
    # start checking filament consumption
    UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1


##  m600 trigger wait loop
[delayed_gcode DELAY_M600]
gcode:
    # use set for friendly variable names
    {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
    {% set length=printer["gcode_macro F_CONSUMED"].filament_length %}
    {% set position=printer["gcode_macro F_CONSUMED"].toolhead_position %}
    
    # check if predetermined length is reached
    {% if printer.print_stats.filament_used|float <= (consumed|float + length|float - position|float) %}
        # start looping every second
        UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
    {% else %}
        # loop exited, now run the command
        M600
    {% endif %}

