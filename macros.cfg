
#####################################################################
#### Macros
#####################################################################

##  slicer start
[gcode_macro PRINT_START] 
gcode:
    # slicer variables
    {% set CHAMBER = params.CHAMBER|default(45)|int %}
    {% set BED = params.BED|default(105)|int %}
    {% set HOTEND = params.HOTEND|default(245)|int %}
    {% set HEPH = 0.7 * HOTEND %}  ; 70% hotend preheat temp

    # preheat all the things
    M117 Preheating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED}   ; start bed heater
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={HEPH}    ; hotend preheat
    NEVERMORE_START                ; nevermore for cleaning and warming action
    M106 S64                       ; 25% print fan for air circulation
    CHMBR_LED_PRINT                ; set chamber light to print brightness
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={HEPH}       ; nozzle full temp
    CG28                           ; warm home all axes if needed
    TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={BED}      ; bed full temp

    # environment
    G90                            ; absolute positioning
    {% if printer["temperature_sensor toolhead_temp"].temperature < CHAMBER %} 
      M117 Heatsoaking chamber
      M106 S192                    ; 75% print fan for extra warming
      G0 X150 Y150 Z50 F15000      ; move ab to center chamber warming position
      TEMPERATURE_WAIT SENSOR="temperature_sensor toolhead_temp" MINIMUM={CHAMBER}
      M106 S64                     ; return to 25% print fan
    {% endif %}

    # gantry leveling
    M117 Leveling gantry
    ATTACH_PROBE_LOCK              ; keep klicky connected during next macros
    QGTL                           ; double qgl = true level
    BED_MESH_CALIBRATE             ; generate bed level mesh
    DOCK_PROBE_UNLOCK              ; klicky *must* be docked before scrub macros

    # auto-z
    CLEAN_NOZZLE                   ; warm nozzle scrub for clean home - no purge
    M117 Auto-Z
    G28A                           ; clean home reduces "no trigger on full travel" errors
    CALIBRATE_Z                    ; klicky auto-z magic

    # final prep
    M117 Nozzle purge
    G0 X25 Y305 Z15 F15000         ; move over bucket to catch any heating ooze
    SET_FILAMENT_SENSOR SENSOR=RBOWDEN_SENSOR ENABLE=1      ; enable runout sensor
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={HOTEND}  ; set hotend full temp
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={HOTEND}     ; hotend full temp
    CLEAN_NOZZLE                   ; hot purge into bucket and nozzle scrub
    UPDATE_DELAYED_GCODE ID=MID_PRINT_DIM DURATION=900      ; dim led's after 15m
    M117 Print starting


##  slicer end
[gcode_macro PRINT_END] 
gcode:
    # calculate safe anti-stringing final printhead move location
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}

    # cooldown process
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    TURN_OFF_HEATERS               ; turn off all heaters
    G90                            ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move head to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F5000  ; park head at rear
    M107                           ; turn off print fan
    NEVERMORE_STOP                 ; turn off nevermore
    CHMBR_LED_FLASH                ; flasher
    CHMBR_LED_IDLE                 ; set chamber light to idle brightness
    SET_FILAMENT_SENSOR SENSOR=RBOWDEN_SENSOR ENABLE=0  ; turn off runout sensor
    M117 Print finished


##  basic single pass gantry leveling
[gcode_macro QGL] 
gcode:
    G90                            ; absolute positioning
    BED_MESH_CLEAR                 ; clear bed level mesh
    CG28                           ; home if not already homed
    QUAD_GANTRY_LEVEL RETRIES=0 SAMPLES=1 SPEED=10  ; fast pass qgl
    G28A                           ; z will change after qgl


##  double pass gantry leveling
[gcode_macro QGTL] 
gcode:
    G90                            ; absolute positioning
    BED_MESH_CLEAR                 ; clear bed level mesh
    CG28                           ; home if not already homed
    QUAD_GANTRY_LEVEL RETRIES=0 SAMPLES=1 SPEED=10  ; fast pass qgl
    QUAD_GANTRY_LEVEL              ; slow second pass = true level
    G28A                           ; z will change after qgl


##  double pass gantry leveling with locked klicky
[gcode_macro QGTL_LOCK] 
gcode:
    CG28                           ; home if not already homed
    ATTACH_PROBE_LOCK              ; keep klicky connected during next macros
    QGTL                           ; double pass qgl macro
    DOCK_PROBE_UNLOCK              ; release klicky


##  park over bed center
[gcode_macro PARK] 
gcode:
    CG28                           ; home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z40 F15000        ; move to position


##  park in front for maintenance / cleaning
[gcode_macro PARKFRONT] 
gcode:
    CHMBR_LED_FULL                 ; set chamber light to full brightness
    CG28                           ; home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y10 Z100 F15000        ; move to position


##  park in rear for maintenance / cleaning
[gcode_macro PARKREAR] 
gcode:
    CHMBR_LED_FULL                 ; set chamber light to full brightness
    CG28                           ; home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y300 Z100 F15000       ; move to position


##  park over top of the purge bucket
[gcode_macro PARKBUCKET] 
gcode:
    CG28                           ; home if not already homed
    G90                            ; absolute positioning
    G0 X25 Y305 Z15 F15000         ; move to position


##  activate heaters/fans/leds, runs a fast qgl, then parks over bed center
[gcode_macro PARKPREHEAT] 
gcode:
    {% if printer.idle_timeout.state != "Printing" %}
        CHMBR_LED_PRINT            ; set chamber light to print brightness
        PREHEAT_ABS                ; preheat profile
        QGL                        ; basic quad gantry level
        G90                        ; absolute positioning
        G0 X150 Y150 Z50 F15000    ; move ab to center chamber warming position
        CHMBR_LED_IDLE             ; set chamber light to idle brightness
    {% else %}
        { action_respond_info("PARK disabled while printing!") }
    {% endif %}


##  activate heaters/fans then double-pass qgl
[gcode_macro QGLPREHEAT] 
gcode:
    {% if printer.idle_timeout.state != "Printing" %}
        CHMBR_LED_PRINT            ; set chamber light to print brightness
        PREHEAT_ABS                ; preheat profile
        QGL                        ; basic quad gantry level
        G90                        ; absolute positioning
        G0 X140 Y305 Z25 F15000    ; move ab to rear chamber warming position
        CHMBR_LED_IDLE             ; set chamber light to idle brightness
    {% else %}
        { action_respond_info("PARK disabled while printing!") }
    {% endif %}


##  activate heaters/fans then double-pass qgl
[gcode_macro QGTLPREHEAT] 
gcode:
    {% if printer.idle_timeout.state != "Printing" %}
        CHMBR_LED_PRINT            ; set chamber light to print brightness
        PREHEAT_ABS                ; preheat profile
        QGTL_LOCK                  ; quad gantry true level
        G90                        ; absolute positioning
        G0 X140 Y305 Z25 F15000    ; move ab to rear chamber warming position
        CHMBR_LED_IDLE             ; set chamber light to idle brightness
    {% else %}
        { action_respond_info("PARK disabled while printing!") }
    {% endif %}


##  basic abs/asa preheat parameters
[gcode_macro PREHEAT_ABS] 
gcode:
    NEVERMORE_START                ; nevermore cleans and speeds up warming
    M106 S128                      ; print fan for chamber warming
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=175


[gcode_macro COOLDOWN]
gcode:
    TURN_OFF_HEATERS               ; turn off all heaters
    M107                           ; turn off print fan
    NEVERMORE_STOP                 ; turn off nevermore
    M84                            ; turn off steppers


##  enable nevermore fans
[gcode_macro NEVERMORE_START] 
gcode:
    SET_FAN_SPEED FAN=NEVERMORE SPEED=0.9


##  turn off nevermore fans
[gcode_macro NEVERMORE_STOP] 
gcode:
    SET_FAN_SPEED FAN=NEVERMORE SPEED=0


##  home all (xyz)
[gcode_macro G28A] 
gcode:
    G28 XYZ


##  conditional G28
[gcode_macro CG28] 
gcode: 
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28A
    {% endif %}


##  i'm just here so i don't get typed
[gcode_macro FWRESTART] 
gcode:
    FIRMWARE_RESTART


[gcode_macro SHUTDOWN]
gcode:
    {action_call_remote_method("shutdown_machine")}


[gcode_macro REBOOT]
gcode:
    {action_call_remote_method("reboot_machine")}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0              ; change this for more or less extrusion
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{E} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "VELOCITY=15000" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{E} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

